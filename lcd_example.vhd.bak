--------------------------------------------------------------------------------
--
--   FileName:         lcd_example.vhd
--   Dependencies:     none
--   Design Software:  Quartus II 32-bit Version 11.1 Build 173 SJ Full Version
--
--   HDL CODE IS PROVIDED "AS IS."  DIGI-KEY EXPRESSLY DISCLAIMS ANY
--   WARRANTY OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING BUT NOT
--   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
--   PARTICULAR PURPOSE, OR NON-INFRINGEMENT. IN NO EVENT SHALL DIGI-KEY
--   BE LIABLE FOR ANY INCIDENTAL, SPECIAL, INDIRECT OR CONSEQUENTIAL
--   DAMAGES, LOST PROFITS OR LOST DATA, HARM TO YOUR EQUIPMENT, COST OF
--   PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR SERVICES, ANY CLAIMS
--   BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF),
--   ANY CLAIMS FOR INDEMNITY OR CONTRIBUTION, OR OTHER SIMILAR COSTS.
--
--   Version History
--   Version 1.0 6/13/2012 Scott Larson
--     Initial Public Release
--
--   Prints "123456789" on a HD44780 compatible 8-bit interface character LCD 
--   module using the lcd_controller.vhd component.
--
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY lcd_example IS
  PORT(
      clk, on_off       : IN  STD_LOGIC;  --system clock
      rw, rs, e : OUT STD_LOGIC;  --read/write, setup/data, and enable for lcd
		number	 : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
      lcd_data  : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)); --data signals for lcd
END lcd_example;

ARCHITECTURE behavior OF lcd_example IS
  SIGNAL   lcd_enable : STD_LOGIC;
  SIGNAL   lcd_bus    : STD_LOGIC_VECTOR(9 DOWNTO 0);
  SIGNAL   lcd_busy   : STD_LOGIC;
  SIGNAL   va, vb,vc ,vd: std_logic_vector(9 downto 0);
 
  COMPONENT lcd_controller IS
    PORT(
       clk        : IN  STD_LOGIC; --system clock
       reset_n    : IN  STD_LOGIC; --active low reinitializes lcd
       lcd_enable : IN  STD_LOGIC; --latches data into lcd controller
       lcd_bus    : IN  STD_LOGIC_VECTOR(9 DOWNTO 0); --data and control signals
       busy       : OUT STD_LOGIC; --lcd controller busy/idle feedback
       rw, rs, e  : OUT STD_LOGIC; --read/write, setup/data, and enable for lcd
       lcd_data   : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)); --data signals for lcd
  END COMPONENT;
BEGIN

  --instantiate the lcd controller
  dut: lcd_controller
    PORT MAP(clk => clk, reset_n => '1', lcd_enable => lcd_enable, lcd_bus => lcd_bus, 
             busy => lcd_busy, rw => rw, rs => rs, e => e, lcd_data => lcd_data);
  
  PROCESS(clk)
     VARIABLE char  :  INTEGER RANGE 0 TO 25 := 0;
  BEGIN
  
	
    IF(clk'EVENT AND clk = '1') THEN
	 
      IF(lcd_busy = '0' and lcd_enable = '0') THEN
        lcd_enable <= '1';
        IF(char < 25) THEN
          char := char + 1;
			 else 
			char := 0;
        END IF;
        CASE char IS
          WHEN 1 => lcd_bus <= "1001010110";--v
          WHEN 2 => lcd_bus <= "1001001111";--o
          WHEN 3 => lcd_bus <= "1001001100";--l
          WHEN 4 => lcd_bus <= "1001010101";--u
          WHEN 5 => lcd_bus <= "1001001101";--m
          WHEN 6 => lcd_bus <= "1001000101";--e
          WHEN 7 => lcd_bus <= "1000111010";--' '			 
          WHEN 8 => lcd_bus <= va(9 DOWNTO 0);
          WHEN 9 => lcd_bus <= vb(9 DOWNTO 0);
			 WHEN 10 => lcd_bus <= "1000110000";--0
			 when 11 => lcd_bus <= "1000100101";--%
			 when 12 => lcd_bus <= "1000100000";
			 when 13 => lcd_bus <= "1001001111";--' '
			 when 14 => lcd_bus <= vc(9 DOWNTO 0);
			 when 15 => lcd_bus <= vd(9 DOWNTO 0);
			 when 16 => lcd_bus <= "0011000000"; --pula linha
			 when 17 => lcd_bus <= "1001000011";
			 when 18 => lcd_bus <= "1000110100";
			 when 19 => lcd_bus <= "1000100000";--NAO MUDA
			 when 20 => lcd_bus <= "1000100000";--NAO MUDA
			 when 21 => lcd_bus <= "1001000100";
			 when 22 => lcd_bus <= "1000100011";
			 when 23 => lcd_bus <= "1000110100";
			 
          WHEN OTHERS => lcd_bus <= "0000000010";
        END CASE;
    ELSE
        lcd_enable <= '0';
      END IF;
    END IF;
	 
  END PROCESS;
  with number(3 downto 0) select
	va(9 downto 0) <= 
				"1000110001" when "1010",
				"1000100000" when others;
	with number(3 downto 0) select
	vb(9 downto 0) <= 
				"1000110000" when "0000",
				"1000110001" when "0001",
				"1000110010" when "0010",
				"1000110011" when "0011",
				"1000110100" when "0100",
				"1000110101" when "0101",
				"1000110110" when "0110",
				"1000110111" when "0111",
				"1000111000" when "1000",
				"1000111001" when "1001",
				"1000110000" when "1010",
				"1000100000" when others;
	with on_off select
	vc(9 downto 0) <= 
				"1001000110" when '0',
				"1001001110" when others;
	with on_off select
	vd(9 downto 0) <= 
				"1001000110" when '0',
				"1000100000" when others;			
END behavior;